{"ast":null,"code":"import { _internals, execute, extractNextParameters, haveParametersChanged } from \"./utils.js\";\nimport { validateApiKey, validateTimeout } from \"./validators.js\";\nconst ACCOUNT_PATH = \"/account\";\nconst LOCATIONS_PATH = \"/locations.json\";\nconst SEARCH_PATH = \"/search\";\nconst SEARCH_ARCHIVE_PATH = `/searches`;\n/**\n * Get a JSON response based on search parameters.\n * - Accepts an optional callback.\n * - Get the next page of results by calling the `.next()` method on the returned response object.\n *\n * @param {string} engine - engine name\n * @param {object} parameters - search query parameters for the engine\n * @param {fn=} callback - optional callback\n * @example\n * // single call (async/await)\n * const json = await getJson(\"google\", { api_key: API_KEY, q: \"coffee\" });\n *\n * // single call (callback)\n * getJson(\"google\", { api_key: API_KEY, q: \"coffee\" }, console.log);\n *\n * @example\n * // pagination (async/await)\n * const page1 = await getJson(\"google\", { q: \"coffee\", start: 15 });\n * const page2 = await page1.next?.();\n *\n * @example\n * // pagination (callback)\n * getJson(\"google\", { q: \"coffee\", start: 15 }, (page1) => {\n *   page1.next?.((page2) => {\n *     console.log(page2);\n *   });\n * });\n *\n * @example\n * // pagination loop (async/await)\n * const organicResults = [];\n * let page = await getJson(\"google\", { api_key: API_KEY, q: \"coffee\" });\n * while (page) {\n *   organicResults.push(...page.organic_results);\n *   if (organicResults.length >= 30) break;\n *   page = await page.next?.();\n * }\n *\n * @example\n * // pagination loop (callback)\n * const organicResults = [];\n * getJson(\"google\", { api_key: API_KEY, q: \"coffee\" }, (page) => {\n *   organicResults.push(...page.organic_results);\n *   if (organicResults.length < 30 && page.next) {\n *     page.next();\n *   }\n * });\n */\nexport async function getJson(engine, parameters, callback) {\n  const key = validateApiKey(parameters.api_key, true);\n  const timeout = validateTimeout(parameters.timeout);\n  const response = await _internals.execute(SEARCH_PATH, {\n    ...parameters,\n    engine,\n    api_key: key,\n    output: \"json\"\n  }, timeout);\n  const json = await response.json();\n  const nextParametersFromResponse = extractNextParameters(json);\n  if (\n  // https://github.com/serpapi/public-roadmap/issues/562\n  // https://github.com/serpapi/public-roadmap/issues/563\n  engine !== \"yahoo_shopping\" && nextParametersFromResponse) {\n    const nextParameters = {\n      ...parameters,\n      ...nextParametersFromResponse\n    };\n    if (haveParametersChanged(parameters, nextParameters)) {\n      json.next = function () {\n        let innerCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : callback;\n        return getJson(engine, nextParameters, innerCallback);\n      };\n    }\n  }\n  callback?.(json);\n  return json;\n}\n/**\n * Get a HTML response based on search parameters.\n * - Accepts an optional callback.\n * - Responds with a JSON string if the search request hasn't completed.\n *\n * @param {string} engine - engine name\n * @param {object} parameters - search query parameters for the engine\n * @param {fn=} callback - optional callback\n * @example\n * // async/await\n * const html = await getHtml(\"google\", { api_key: API_KEY, q: \"coffee\" });\n *\n * // callback\n * getHtml(\"google\", { api_key: API_KEY, q: \"coffee\" }, console.log);\n */\nexport async function getHtml(engine, parameters, callback) {\n  const key = validateApiKey(parameters.api_key, true);\n  const timeout = validateTimeout(parameters.timeout);\n  const response = await _internals.execute(SEARCH_PATH, {\n    ...parameters,\n    engine,\n    api_key: key,\n    output: \"html\"\n  }, timeout);\n  const html = await response.text();\n  callback?.(html);\n  return html;\n}\n/**\n * Get a JSON response given a search ID.\n * - This search ID can be obtained from the `search_metadata.id` key in the response.\n * - Typically used together with the `async` parameter.\n * - Accepts an optional callback.\n *\n * @param {string} searchId - search ID\n * @param {object} parameters\n * @param {string=} [parameters.api_key] - API key\n * @param {number=} [parameters.timeout] - timeout in milliseconds\n * @param {fn=} callback - optional callback\n * @example\n * const response = await getJson(\"google\", { api_key: API_KEY, async: true, q: \"coffee\" });\n * const { id } = response.search_metadata;\n * await delay(1000); // wait for the request to be processed.\n *\n * // async/await\n * const json = await getJsonBySearchId(id, { api_key: API_KEY });\n *\n * // callback\n * getJsonBySearchId(id, { api_key: API_KEY }, console.log);\n */\nexport async function getJsonBySearchId(searchId) {\n  let parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let callback = arguments.length > 2 ? arguments[2] : undefined;\n  const key = validateApiKey(parameters.api_key);\n  const timeout = validateTimeout(parameters.timeout);\n  const response = await _internals.execute(`${SEARCH_ARCHIVE_PATH}/${searchId}`, {\n    api_key: key,\n    output: \"json\"\n  }, timeout);\n  const json = await response.json();\n  callback?.(json);\n  return json;\n}\n/**\n * Get a HTML response given a search ID.\n * - This search ID can be obtained from the `search_metadata.id` key in the response.\n * - Typically used together with the `async` parameter.\n * - Accepts an optional callback.\n * - Responds with a JSON if the search request hasn't completed.\n *\n * @param {string} searchId - search ID\n * @param {object} parameters\n * @param {string=} [parameters.api_key] - API key\n * @param {number=} [parameters.timeout] - timeout in milliseconds\n * @param {fn=} callback - optional callback\n * @example\n * const response = await getJson(\"google\", { api_key: API_KEY, async: true, q: \"coffee\" });\n * const { id } = response.search_metadata;\n * await delay(1000); // wait for the request to be processed.\n *\n * // async/await\n * const html = await getHtmlBySearchId(id, { api_key: API_KEY });\n *\n * // callback\n * getHtmlBySearchId(id, { api_key: API_KEY }, console.log);\n */\nexport async function getHtmlBySearchId(searchId) {\n  let parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let callback = arguments.length > 2 ? arguments[2] : undefined;\n  const key = validateApiKey(parameters.api_key);\n  const timeout = validateTimeout(parameters.timeout);\n  const response = await _internals.execute(`${SEARCH_ARCHIVE_PATH}/${searchId}`, {\n    api_key: key,\n    output: \"html\"\n  }, timeout);\n  const html = await response.text();\n  callback?.(html);\n  return html;\n}\n/**\n * Get account information of an API key.\n * https://serpapi.com/account-api\n *\n * @param {object} parameters\n * @param {string=} [parameters.api_key] - API key\n * @param {number=} [parameters.timeout] - timeout in milliseconds\n * @param {fn=} callback - optional callback\n * @example\n * // async/await\n * const info = await getAccount({ api_key: API_KEY });\n *\n * // callback\n * getAccount({ api_key: API_KEY }, console.log);\n */\nexport async function getAccount() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let callback = arguments.length > 1 ? arguments[1] : undefined;\n  const key = validateApiKey(parameters.api_key);\n  const timeout = validateTimeout(parameters.timeout);\n  const response = await execute(ACCOUNT_PATH, {\n    api_key: key\n  }, timeout);\n  const info = await response.json();\n  callback?.(info);\n  return info;\n}\n/**\n * Get supported locations. Does not require an API key.\n * https://serpapi.com/locations-api\n *\n * @param {object} parameters\n * @param {string=} [parameters.q] - query for a location\n * @param {number=} [parameters.limit] - limit on number of locations returned\n * @param {number=} [parameters.timeout] - timeout in milliseconds\n * @param {fn=} callback - optional callback\n * @example\n * // async/await\n * const locations = await getLocations({ limit: 3 });\n *\n * // callback\n * getLocations({ limit: 3 }, console.log);\n */\nexport async function getLocations() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let callback = arguments.length > 1 ? arguments[1] : undefined;\n  const timeout = validateTimeout(parameters.timeout);\n  const response = await execute(LOCATIONS_PATH, parameters, timeout);\n  const locations = await response.json();\n  callback?.(locations);\n  return locations;\n}","map":{"version":3,"names":["_internals","execute","extractNextParameters","haveParametersChanged","validateApiKey","validateTimeout","ACCOUNT_PATH","LOCATIONS_PATH","SEARCH_PATH","SEARCH_ARCHIVE_PATH","getJson","engine","parameters","callback","key","api_key","timeout","response","output","json","nextParametersFromResponse","nextParameters","next","innerCallback","arguments","length","undefined","getHtml","html","text","getJsonBySearchId","searchId","getHtmlBySearchId","getAccount","info","getLocations","locations"],"sources":["/Users/aluabajzanova/Desktop/skylineÂ /node_modules/serpapi/esm/src/serpapi.js"],"sourcesContent":["import { _internals, execute, extractNextParameters, haveParametersChanged, } from \"./utils.js\";\nimport { validateApiKey, validateTimeout } from \"./validators.js\";\nconst ACCOUNT_PATH = \"/account\";\nconst LOCATIONS_PATH = \"/locations.json\";\nconst SEARCH_PATH = \"/search\";\nconst SEARCH_ARCHIVE_PATH = `/searches`;\n/**\n * Get a JSON response based on search parameters.\n * - Accepts an optional callback.\n * - Get the next page of results by calling the `.next()` method on the returned response object.\n *\n * @param {string} engine - engine name\n * @param {object} parameters - search query parameters for the engine\n * @param {fn=} callback - optional callback\n * @example\n * // single call (async/await)\n * const json = await getJson(\"google\", { api_key: API_KEY, q: \"coffee\" });\n *\n * // single call (callback)\n * getJson(\"google\", { api_key: API_KEY, q: \"coffee\" }, console.log);\n *\n * @example\n * // pagination (async/await)\n * const page1 = await getJson(\"google\", { q: \"coffee\", start: 15 });\n * const page2 = await page1.next?.();\n *\n * @example\n * // pagination (callback)\n * getJson(\"google\", { q: \"coffee\", start: 15 }, (page1) => {\n *   page1.next?.((page2) => {\n *     console.log(page2);\n *   });\n * });\n *\n * @example\n * // pagination loop (async/await)\n * const organicResults = [];\n * let page = await getJson(\"google\", { api_key: API_KEY, q: \"coffee\" });\n * while (page) {\n *   organicResults.push(...page.organic_results);\n *   if (organicResults.length >= 30) break;\n *   page = await page.next?.();\n * }\n *\n * @example\n * // pagination loop (callback)\n * const organicResults = [];\n * getJson(\"google\", { api_key: API_KEY, q: \"coffee\" }, (page) => {\n *   organicResults.push(...page.organic_results);\n *   if (organicResults.length < 30 && page.next) {\n *     page.next();\n *   }\n * });\n */\nexport async function getJson(engine, parameters, callback) {\n    const key = validateApiKey(parameters.api_key, true);\n    const timeout = validateTimeout(parameters.timeout);\n    const response = await _internals.execute(SEARCH_PATH, {\n        ...parameters,\n        engine,\n        api_key: key,\n        output: \"json\",\n    }, timeout);\n    const json = await response.json();\n    const nextParametersFromResponse = extractNextParameters(json);\n    if (\n    // https://github.com/serpapi/public-roadmap/issues/562\n    // https://github.com/serpapi/public-roadmap/issues/563\n    engine !== \"yahoo_shopping\" &&\n        nextParametersFromResponse) {\n        const nextParameters = { ...parameters, ...nextParametersFromResponse };\n        if (haveParametersChanged(parameters, nextParameters)) {\n            json.next = (innerCallback = callback) => getJson(engine, nextParameters, innerCallback);\n        }\n    }\n    callback?.(json);\n    return json;\n}\n/**\n * Get a HTML response based on search parameters.\n * - Accepts an optional callback.\n * - Responds with a JSON string if the search request hasn't completed.\n *\n * @param {string} engine - engine name\n * @param {object} parameters - search query parameters for the engine\n * @param {fn=} callback - optional callback\n * @example\n * // async/await\n * const html = await getHtml(\"google\", { api_key: API_KEY, q: \"coffee\" });\n *\n * // callback\n * getHtml(\"google\", { api_key: API_KEY, q: \"coffee\" }, console.log);\n */\nexport async function getHtml(engine, parameters, callback) {\n    const key = validateApiKey(parameters.api_key, true);\n    const timeout = validateTimeout(parameters.timeout);\n    const response = await _internals.execute(SEARCH_PATH, {\n        ...parameters,\n        engine,\n        api_key: key,\n        output: \"html\",\n    }, timeout);\n    const html = await response.text();\n    callback?.(html);\n    return html;\n}\n/**\n * Get a JSON response given a search ID.\n * - This search ID can be obtained from the `search_metadata.id` key in the response.\n * - Typically used together with the `async` parameter.\n * - Accepts an optional callback.\n *\n * @param {string} searchId - search ID\n * @param {object} parameters\n * @param {string=} [parameters.api_key] - API key\n * @param {number=} [parameters.timeout] - timeout in milliseconds\n * @param {fn=} callback - optional callback\n * @example\n * const response = await getJson(\"google\", { api_key: API_KEY, async: true, q: \"coffee\" });\n * const { id } = response.search_metadata;\n * await delay(1000); // wait for the request to be processed.\n *\n * // async/await\n * const json = await getJsonBySearchId(id, { api_key: API_KEY });\n *\n * // callback\n * getJsonBySearchId(id, { api_key: API_KEY }, console.log);\n */\nexport async function getJsonBySearchId(searchId, parameters = {}, callback) {\n    const key = validateApiKey(parameters.api_key);\n    const timeout = validateTimeout(parameters.timeout);\n    const response = await _internals.execute(`${SEARCH_ARCHIVE_PATH}/${searchId}`, {\n        api_key: key,\n        output: \"json\",\n    }, timeout);\n    const json = await response.json();\n    callback?.(json);\n    return json;\n}\n/**\n * Get a HTML response given a search ID.\n * - This search ID can be obtained from the `search_metadata.id` key in the response.\n * - Typically used together with the `async` parameter.\n * - Accepts an optional callback.\n * - Responds with a JSON if the search request hasn't completed.\n *\n * @param {string} searchId - search ID\n * @param {object} parameters\n * @param {string=} [parameters.api_key] - API key\n * @param {number=} [parameters.timeout] - timeout in milliseconds\n * @param {fn=} callback - optional callback\n * @example\n * const response = await getJson(\"google\", { api_key: API_KEY, async: true, q: \"coffee\" });\n * const { id } = response.search_metadata;\n * await delay(1000); // wait for the request to be processed.\n *\n * // async/await\n * const html = await getHtmlBySearchId(id, { api_key: API_KEY });\n *\n * // callback\n * getHtmlBySearchId(id, { api_key: API_KEY }, console.log);\n */\nexport async function getHtmlBySearchId(searchId, parameters = {}, callback) {\n    const key = validateApiKey(parameters.api_key);\n    const timeout = validateTimeout(parameters.timeout);\n    const response = await _internals.execute(`${SEARCH_ARCHIVE_PATH}/${searchId}`, {\n        api_key: key,\n        output: \"html\",\n    }, timeout);\n    const html = await response.text();\n    callback?.(html);\n    return html;\n}\n/**\n * Get account information of an API key.\n * https://serpapi.com/account-api\n *\n * @param {object} parameters\n * @param {string=} [parameters.api_key] - API key\n * @param {number=} [parameters.timeout] - timeout in milliseconds\n * @param {fn=} callback - optional callback\n * @example\n * // async/await\n * const info = await getAccount({ api_key: API_KEY });\n *\n * // callback\n * getAccount({ api_key: API_KEY }, console.log);\n */\nexport async function getAccount(parameters = {}, callback) {\n    const key = validateApiKey(parameters.api_key);\n    const timeout = validateTimeout(parameters.timeout);\n    const response = await execute(ACCOUNT_PATH, {\n        api_key: key,\n    }, timeout);\n    const info = await response.json();\n    callback?.(info);\n    return info;\n}\n/**\n * Get supported locations. Does not require an API key.\n * https://serpapi.com/locations-api\n *\n * @param {object} parameters\n * @param {string=} [parameters.q] - query for a location\n * @param {number=} [parameters.limit] - limit on number of locations returned\n * @param {number=} [parameters.timeout] - timeout in milliseconds\n * @param {fn=} callback - optional callback\n * @example\n * // async/await\n * const locations = await getLocations({ limit: 3 });\n *\n * // callback\n * getLocations({ limit: 3 }, console.log);\n */\nexport async function getLocations(parameters = {}, callback) {\n    const timeout = validateTimeout(parameters.timeout);\n    const response = await execute(LOCATIONS_PATH, parameters, timeout);\n    const locations = await response.json();\n    callback?.(locations);\n    return locations;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}