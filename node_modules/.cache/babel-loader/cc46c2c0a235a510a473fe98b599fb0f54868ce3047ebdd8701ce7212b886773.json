{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst endpoint = process.env.REACT_APP_ENDPOINT || \"\";\nexport const getPosts = createAsyncThunk(\"posts/getPosts\", async (_ref, _ref2) => {\n  let {\n    limit,\n    page\n  } = _ref;\n  let {\n    rejectWithValue /*, dispatch, getState*/\n  } = _ref2;\n  try {\n    const response = await fetch(`${endpoint}/posts?_page=${page}&_limit=${limit}&_expand=user`);\n    if (!response.ok) {\n      throw new Error(\"Server error!\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\nexport const createPosts = createAsyncThunk(\"posts/createPosts\", async (_ref3, _ref4) => {\n  let {\n    image,\n    title,\n    text\n  } = _ref3;\n  let {\n    rejectWithValue /*, dispatch, getState*/\n  } = _ref4;\n  try {\n    const response = await fetch(`${endpoint}/posts?_image=${image}&_title=${title}&_text=${text}&_expand=user`);\n    if (!response.ok) {\n      throw new Error(\"Server error!\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\nconst PostsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    posts: [],\n    isLoading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: {\n    [getPosts.pending]: state => {\n      state.isLoading = true;\n    },\n    [getPosts.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    [getPosts.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.error = null;\n      state.posts = action.payload;\n    }\n  }\n});\nexport default PostsSlice;","map":{"version":3,"names":["createSlice","createAsyncThunk","endpoint","process","env","REACT_APP_ENDPOINT","getPosts","_ref","_ref2","limit","page","rejectWithValue","response","fetch","ok","Error","data","json","error","createPosts","_ref3","_ref4","image","title","text","PostsSlice","name","initialState","posts","isLoading","reducers","extraReducers","pending","state","rejected","action","payload","fulfilled"],"sources":["/Users/aluabajzanova/Desktop/examreactÂ /src/store/postsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst endpoint = process.env.REACT_APP_ENDPOINT || \"\";\r\n\r\nexport const getPosts = createAsyncThunk(\r\n  \"posts/getPosts\",\r\n  async ({ limit, page }, { rejectWithValue /*, dispatch, getState*/ }) => {\r\n    try {\r\n      const response = await fetch(\r\n        `${endpoint}/posts?_page=${page}&_limit=${limit}&_expand=user`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Server error!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const createPosts = createAsyncThunk(\r\n  \"posts/createPosts\",\r\n  async ({ image, title, text }, { rejectWithValue /*, dispatch, getState*/ }) => {\r\n    try {\r\n      const response = await fetch(\r\n        `${endpoint}/posts?_image=${image}&_title=${title}&_text=${text}&_expand=user`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Server error!\");\r\n      }\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nconst PostsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState: {\r\n    posts: [],\r\n    isLoading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n  },\r\n  extraReducers: {\r\n    [getPosts.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    [getPosts.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    [getPosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = null;\r\n      state.posts = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport default PostsSlice;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,EAAE;AAErD,OAAO,MAAMC,QAAQ,GAAGL,gBAAgB,CACtC,gBAAgB,EAChB,OAAAM,IAAA,EAAAC,KAAA,KAAyE;EAAA,IAAlE;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAAH,IAAA;EAAA,IAAE;IAAEI,eAAe,CAAC;EAAyB,CAAC,GAAAH,KAAA;EAClE,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEX,QAAS,gBAAeQ,IAAK,WAAUD,KAAM,eAAc,CAC/D;IAED,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAClC;IAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;IAElC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOP,eAAe,CAACO,KAAK,CAAC;EAC/B;AACF,CAAC,CACF;AAED,OAAO,MAAMC,WAAW,GAAGlB,gBAAgB,CACzC,mBAAmB,EACnB,OAAAmB,KAAA,EAAAC,KAAA,KAAgF;EAAA,IAAzE;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAAJ,KAAA;EAAA,IAAE;IAAET,eAAe,CAAC;EAAyB,CAAC,GAAAU,KAAA;EACzE,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEX,QAAS,iBAAgBoB,KAAM,WAAUC,KAAM,UAASC,IAAK,eAAc,CAC/E;IAED,IAAI,CAACZ,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAClC;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;IAElC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOP,eAAe,CAACO,KAAK,CAAC;EAC/B;AACF,CAAC,CACF;AAED,MAAMO,UAAU,GAAGzB,WAAW,CAAC;EAC7B0B,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,SAAS,EAAE,KAAK;IAChBX,KAAK,EAAE;EACT,CAAC;EACDY,QAAQ,EAAE,CACV,CAAC;EACDC,aAAa,EAAE;IACb,CAACzB,QAAQ,CAAC0B,OAAO,GAAIC,KAAK,IAAK;MAC7BA,KAAK,CAACJ,SAAS,GAAG,IAAI;IACxB,CAAC;IACD,CAACvB,QAAQ,CAAC4B,QAAQ,GAAG,CAACD,KAAK,EAAEE,MAAM,KAAK;MACtCF,KAAK,CAACJ,SAAS,GAAG,KAAK;MACvBI,KAAK,CAACf,KAAK,GAAGiB,MAAM,CAACC,OAAO;IAC9B,CAAC;IACD,CAAC9B,QAAQ,CAAC+B,SAAS,GAAG,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACvCF,KAAK,CAACJ,SAAS,GAAG,KAAK;MACvBI,KAAK,CAACf,KAAK,GAAG,IAAI;MAClBe,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,eAAeX,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}