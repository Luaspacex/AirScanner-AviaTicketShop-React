{"ast":null,"code":"import * as dntShim from \"../_dnt.shims.js\";\nimport { version } from \"../version.js\";\n/**\n * This `_internals` object is needed to support stubbing/spying of\n * fetch, execute and getBaseUrl.\n * https://deno.land/manual@v1.28.3/basics/testing/mocking\n *\n * If fetch is stubbed via `globalThis`, the test phase of the npm build fails.\n * ```ts\n * const fetchStub = stub(globalThis, \"fetch\", resolvesNext([new Response(\"data\")]));\n * ```\n *\n * [`dnt`](https://github.com/denoland/dnt) shims `fetch` by relying on the\n * `undici` package. It replaces all references to `fetch` with `dntShim.fetch`.\n * As a side effect, stubbing `globalThis.fetch` becomes incorrect; we want to\n * stub `dntShim.fetch` instead.\n *\n * As a workaround, the `_internals` object serves as an indirection and we\n * stub the `fetch` key of this object instead.\n */\nexport const _internals = {\n  fetch: dntShim.fetch,\n  execute: execute,\n  getBaseUrl: getBaseUrl\n};\n/** Facilitates stubbing in tests, e.g. localhost as the base url */\nfunction getBaseUrl() {\n  return \"https://serpapi.com\";\n}\nexport function extractNextParameters(json) {\n  const nextUrlString = json[\"serpapi_pagination\"]?.[\"next\"] || json[\"pagination\"]?.[\"next\"];\n  if (nextUrlString) {\n    const nextUrl = new URL(nextUrlString);\n    const nextParameters = Object.fromEntries(nextUrl.searchParams.entries());\n    delete nextParameters[\"engine\"];\n    return nextParameters;\n  }\n}\nexport function haveParametersChanged(parameters, nextParameters) {\n  const keys = [...Object.keys(parameters), ...Object.keys(nextParameters)];\n  const uniqueKeys = new Set(keys);\n  return [...uniqueKeys].some(key => `${parameters[key]}` !== `${nextParameters[key]}` // string comparison\n  );\n}\n\nfunction getSource() {\n  const moduleSource = `serpapi@${version}`;\n  try {\n    // Check if running in Node.js\n    // dnt-shim-ignore\n    // deno-lint-ignore no-explicit-any\n    const nodeVersion = globalThis.process?.versions?.node;\n    if (nodeVersion) {\n      return `nodejs@${nodeVersion},${moduleSource}`;\n    }\n    // Assumes running in Deno instead. https://deno.land/api?s=Deno.version\n    // Deno.version is not shimmed since it's not used when ran in a Node env.\n    // dnt-shim-ignore\n    // deno-lint-ignore no-explicit-any\n    const denoVersion = globalThis.Deno?.version?.deno;\n    if (denoVersion) {\n      return `deno@${denoVersion},${moduleSource}`;\n    }\n    return `nodejs,${moduleSource}`;\n  } catch {\n    // If something unexpectedly occurs, revert to \"nodejs\".\n    return `nodejs,${moduleSource}`;\n  }\n}\nexport function buildUrl(path, parameters) {\n  const nonUndefinedParams = Object.entries(parameters).filter(_ref => {\n    let [_, value] = _ref;\n    return value !== undefined;\n  }).map(_ref2 => {\n    let [key, value] = _ref2;\n    return [key, `${value}`];\n  });\n  const searchParams = new URLSearchParams(nonUndefinedParams);\n  return `${_internals.getBaseUrl()}${path}?${searchParams}`;\n}\nexport async function execute(path, parameters, timeout) {\n  const url = buildUrl(path, {\n    ...parameters,\n    source: getSource()\n  });\n  return await _internals.fetch(url, {\n    signal: AbortSignal.timeout(timeout)\n  });\n}","map":{"version":3,"names":["dntShim","version","_internals","fetch","execute","getBaseUrl","extractNextParameters","json","nextUrlString","nextUrl","URL","nextParameters","Object","fromEntries","searchParams","entries","haveParametersChanged","parameters","keys","uniqueKeys","Set","some","key","getSource","moduleSource","nodeVersion","globalThis","process","versions","node","denoVersion","Deno","deno","buildUrl","path","nonUndefinedParams","filter","_ref","_","value","undefined","map","_ref2","URLSearchParams","timeout","url","source","signal","AbortSignal"],"sources":["/Users/aluabajzanova/Desktop/skylineÂ /node_modules/serpapi/esm/src/utils.js"],"sourcesContent":["import * as dntShim from \"../_dnt.shims.js\";\nimport { version } from \"../version.js\";\n/**\n * This `_internals` object is needed to support stubbing/spying of\n * fetch, execute and getBaseUrl.\n * https://deno.land/manual@v1.28.3/basics/testing/mocking\n *\n * If fetch is stubbed via `globalThis`, the test phase of the npm build fails.\n * ```ts\n * const fetchStub = stub(globalThis, \"fetch\", resolvesNext([new Response(\"data\")]));\n * ```\n *\n * [`dnt`](https://github.com/denoland/dnt) shims `fetch` by relying on the\n * `undici` package. It replaces all references to `fetch` with `dntShim.fetch`.\n * As a side effect, stubbing `globalThis.fetch` becomes incorrect; we want to\n * stub `dntShim.fetch` instead.\n *\n * As a workaround, the `_internals` object serves as an indirection and we\n * stub the `fetch` key of this object instead.\n */\nexport const _internals = {\n    fetch: dntShim.fetch,\n    execute: execute,\n    getBaseUrl: getBaseUrl,\n};\n/** Facilitates stubbing in tests, e.g. localhost as the base url */\nfunction getBaseUrl() {\n    return \"https://serpapi.com\";\n}\nexport function extractNextParameters(json) {\n    const nextUrlString = json[\"serpapi_pagination\"]?.[\"next\"] ||\n        json[\"pagination\"]?.[\"next\"];\n    if (nextUrlString) {\n        const nextUrl = new URL(nextUrlString);\n        const nextParameters = Object.fromEntries(nextUrl.searchParams.entries());\n        delete nextParameters[\"engine\"];\n        return nextParameters;\n    }\n}\nexport function haveParametersChanged(parameters, nextParameters) {\n    const keys = [\n        ...Object.keys(parameters),\n        ...Object.keys(nextParameters),\n    ];\n    const uniqueKeys = new Set(keys);\n    return [...uniqueKeys].some((key) => `${parameters[key]}` !== `${nextParameters[key]}` // string comparison\n    );\n}\nfunction getSource() {\n    const moduleSource = `serpapi@${version}`;\n    try {\n        // Check if running in Node.js\n        // dnt-shim-ignore\n        // deno-lint-ignore no-explicit-any\n        const nodeVersion = globalThis.process?.versions?.node;\n        if (nodeVersion) {\n            return `nodejs@${nodeVersion},${moduleSource}`;\n        }\n        // Assumes running in Deno instead. https://deno.land/api?s=Deno.version\n        // Deno.version is not shimmed since it's not used when ran in a Node env.\n        // dnt-shim-ignore\n        // deno-lint-ignore no-explicit-any\n        const denoVersion = globalThis.Deno?.version?.deno;\n        if (denoVersion) {\n            return `deno@${denoVersion},${moduleSource}`;\n        }\n        return `nodejs,${moduleSource}`;\n    }\n    catch {\n        // If something unexpectedly occurs, revert to \"nodejs\".\n        return `nodejs,${moduleSource}`;\n    }\n}\nexport function buildUrl(path, parameters) {\n    const nonUndefinedParams = Object.entries(parameters)\n        .filter(([_, value]) => value !== undefined)\n        .map(([key, value]) => [key, `${value}`]);\n    const searchParams = new URLSearchParams(nonUndefinedParams);\n    return `${_internals.getBaseUrl()}${path}?${searchParams}`;\n}\nexport async function execute(path, parameters, timeout) {\n    const url = buildUrl(path, {\n        ...parameters,\n        source: getSource(),\n    });\n    return await _internals.fetch(url, {\n        signal: AbortSignal.timeout(timeout),\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}